   =============================================================================
      A Step-by-Step Guide to Installing Kubernetes Cluster on Ubuntu 22.04
   =============================================================================
   
   
   
   1) Set hostname on Each Node
   sudo hostnamectl set-hostname "k8smaster.example.net"
   sudo hostnamectl set-hostname "k8sworker1.example.net"   // 1st worker node
   sudo hostnamectl set-hostname "k8sworker2.example.net"   // 2nd worker node
   exec bash
   
   Add the following lines in /etc/hosts file on each node
    192.168.1.173   k8smaster.example.net k8smaster
	192.168.1.174   k8sworker1.example.net k8sworker1
	192.168.1.175   k8sworker2.example.net k8sworker2
   
   2) Disable Swap & Add kernel Parameters
   
   sudo swapoff -a
   sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
   
   Load the following kernel modules on all the nodes,
   
   sudo tee /etc/modules-load.d/containerd.conf <<EOF
		overlay
		br_netfilter
		EOF
   
   sudo modprobe overlay
   sudo modprobe br_netfilter
   
   Set the following Kernel parameters for Kubernetes, run beneath tee command
   
  sudo tee /etc/sysctl.d/kubernetes.conf <<EOT
	net.bridge.bridge-nf-call-ip6tables = 1
	net.bridge.bridge-nf-call-iptables = 1
	net.ipv4.ip_forward = 1
EOT

Reload the above changes, run

 sudo sysctl --system
   
3) Install Containerd Runtime
In this guide, we are using containerd runtime for our Kubernetes cluster. So, to install containerd, first install its dependencies.

sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
   

Enable docker repository
$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"


Now, run following apt command to install containerd

$ sudo apt update
$ sudo apt install -y containerd.io


Configure containerd so that it starts using systemd as cgroup.

$ containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
$ sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

Restart and enable containerd service
$ sudo systemctl restart containerd
$ sudo systemctl enable containerd

4) Add Apt Repository for Kubernetes

Kubernetes package is not available in the default Ubuntu 22.04 package repositories. So we need to add Kubernetes repository. run following command to download public signing key,

sudo apt-get update

sudo apt-get install -y apt-transport-https ca-certificates curl gpg

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

5) Install Kubectl, Kubeadm and Kubelet (all nodes)
After adding the repositories, install essential Kubernetes components, including kubectl, kubelet, and kubeadm, on all nodes with the following commands:

sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

====================
RUN ON MASTER NODE
====================
Step 7: Initialize Kubernetes Cluster with Kubeadm (master node)
With all the prerequisites in place, initialize the Kubernetes cluster on the master node using the following Kubeadm command:

kubeadm init  

Run the following commands on the master node:
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

use kubectl commands to check the cluster and node status

kubectl get nodes

Add Worker Nodes to the Cluster (worker nodes) with kubeadm join command from cluster initialization

 Install Kubernetes Network Plugin (master node)
To enable communication between pods in the cluster, you need a network plugin. Install the Calico network plugin with the following command from the master node:

kubectl apply -f "https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s-1.11.yaml"

OR

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml


Verify the cluster and test (master node)
Finally, we want to verify whether our cluster is successfully created.

kubectl get pods -n kube-system
kubectl get nodes

